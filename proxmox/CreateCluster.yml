- name: Prep ignition files
  hosts: localhost
  become: true
  vars_files:
    - vars.yml
  environment:
    KUBECONFIG:     
  tasks:
    - name: get hostname to update hosts file
      shell: echo $HOSTNAME
      register: result
      tags:
         - build_infra
    - set_fact:
        actual_hostname: "{{ result.stdout }}"
      tags:
         - build_infra
    - name: set hosts file 
      template:
        src: ./templates/hosts
        dest: /etc/hosts
        force: yes
        mode: "u=rw,g=r,o=r"
      tags:
         - build_infra
    - name: set resolv.conf file
      template:
        src: ./templates/resolv.j2
        dest: /etc/resolv.conf
        force: yes
        mode: "u=rw,g=r,o=r"
      tags:
         - build_infra
    - name: Install needed packages
      package:
        name: 
          - "{{ item }}"
        state: present
      loop: "{{ packages }}"
      tags:
         - build_infra
    - name: copy httpd.conf to use port 8080
      template:
        src: ./templates/httpd.conf
        dest: /etc/httpd/conf/httpd.conf
        force: yes
        mode: "u=rw,g=r,o=r"
      tags:
         - build_infra
    - name: Create TFTP config
      file:
        path: /var/lib/tftpboot/pxelinux.cfg
        state: directory
        mode: 0755
      tags:
         - build_infra
    - name: restart tftp service
      service:
        name: tftp
        enabled: yes
        state: restarted
      tags:
         - build_infra
    - name: Create TFTP RHCOS dir
      file:
        path: /var/lib/tftpboot/rhcos
        state: directory
        mode: 0755
      tags:
         - build_infra
    - name: Copy over files needed for TFTP
      shell: "cp -a /usr/share/syslinux/* /var/lib/tftpboot"
      tags:
         - build_infra
    - name: setup dnsmasq
      template:
        src: ./templates/dnsmasq.j2
        dest: /etc/dnsmasq.conf
        force: yes
        mode: "u=rw,g=r,o=r"
      tags:
         - build_infra
    - name: Copy resolv.dnsmasq this would provide external dns server 
      template:
        src: ./templates/resolv.dnsmasq
        dest: /etc/resolv.dnsmasq
        force: yes
        mode: "u=rw,g=r,o=r"
      tags:
         - build_infra
    - name: configure haproxy
      template:
        src: ./templates/haproxy.j2
        dest: /etc/haproxy/haproxy.cfg
        force: yes
        mode: "u=rw,g=r,o=r"
      tags:
         - build_infra
    - name: make sure the haproxy can bind to 6443 
      shell:
        cmd: setsebool -P haproxy_connect_any=1
      tags:
         - build_infra
    - name: restart the haproxy
      service:
        name: haproxy
        enabled: yes
        state: restarted
      tags:
         - build_infra
    - name: Ansible remove file glob
      file:
        path: /var/lib/tftpboot/pxelinux.cfg/{{ ( '01-' + macstart + mac + item.macend ) | replace(':','-') }}
        state: absent
      with_items: "{{ vms_info }}"
      tags:
         - build_infra 
    - name: Setup Auto pxe boot
      template:
        src: ./templates/{{ item.ign }}
        dest: /var/lib/tftpboot/pxelinux.cfg/{{ ( '01-' + macstart + mac + item.macend ) | replace(':','-') }}
        force: yes
        mode: "u=rx,g=rx,o=rx"
      loop: "{{ vms_info }}"
      tags:
         - build_infra
    - name: restart tftp service
      service:
        name: dnsmasq
        enabled: yes
        state: restarted
      tags:
         - build_infra
    - name: restart tftp service
      service:
        name: httpd
        enabled: yes
        state: restarted
      tags: 
         - build_infra
    - name: Open up firewall ports
      firewalld:
        permanent: yes
        immediate: yes
        state: enabled
        port: "{{ item }}"
      loop: "{{ ports }}"
      run_once: true
      tags:
         - build_infra
    - name: Cleanup files 
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "../ocp4"
        - "/var/www/html/ignition"
        - "/var/www/html/install"
        - "../openshift-*"
        - "../*.img"
        - "../rhcos-live-*"
        - "../oc"
        - "../kubectl"
        - "/root/.kube"
      tags:
         - prep_install
    - name: Prep directories
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "/root/.kube"
        - "../ocp4"
        - "/var/www/html/ignition"
        - "/var/www/html/install"
      tags:
         - prep_install
    - name: get latest OCP GA RHCOS images
      shell:
        chdir: ../
        cmd: ./00-get-ocp-ga.sh
      tags:
         - prep_install
    - name: Copy install-config 
      template:
        src: ./templates/install-config.ocp
        dest: ../ocp4/install-config.yaml
        force: yes
        mode: "u=rw,g=r,o=r"
      tags:
         - prep_install

    - name: get latest OCP installer plus cli
      shell:
        chdir: ../
        cmd: ./02-get-ocp-installer.sh
      tags:
         - prep_install
    - name: Create ignition files
      shell:
        chdir: ../
        cmd: ./11-prep-ignitions.sh
      tags:
         - prep_install

  
- name: Create OCP VMs and start them in sequence
  hosts: pve
  become: true
  vars_files:
    - vars.yml 
  tasks:
    - name: Create new VMs for OCP cluster 
      command: qm create "{{ vimidStart }}{{ item.vimid }}" --net0 virtio="{{ macstart }}{{ mac }}{{ item.macend }}",bridge=vmbr0 --name "{{ item.name }}"  --scsihw virtio-scsi-pci --scsi0 VMs:150,format=qcow2 --cores "{{ item.cpu }}" --memory "{{ item.mem }}"
      loop: "{{ vms_info }}"
      tags:
         - install_ocp
    - name: Start Bootstrap VM 
      command: qm start "{{ vimidStart }}{{ vms_info[0].vimid }}" 
      tags:
         - install_ocp
    - name: Pause for 10 minutes to build app cache
      pause:
        minutes: 10
      tags:
         - install_ocp
    - name: Start Masters VMs
      command: qm start "{{ vimidStart }}{{ item.vimid }}" 
      loop:
        - "{{ vms_info[1] }}"
        - "{{ vms_info[2] }}"
        - "{{ vms_info[3] }}"
      tags:
         - install_ocp
    - name: Pause for 15 minutes to build app cache
      pause:
        minutes: 15
      tags:
         - install_ocp
    - name: Stop BootStarp
      command: qm stop "{{ vimidStart }}{{ vms_info[0].vimid }}"
      tags:
         - install_ocp
    - name: Start workers VMs
      command: qm start "{{ vimidStart }}{{ item.vimid }}" 
      loop:
        - "{{ vms_info[4] }}"
        - "{{ vms_info[5] }}"
      tags:
         - install_ocp
    - name: Pause for 7 minutes to build app cache
      pause:
        minutes: 5
      tags:
         - install_ocp
- name: Copy auth and approve certs
  hosts: localhost
  become: true
  tasks:
    - name: Copy OCP Auth to for generic access
      copy:
        src: ../ocp4/auth/kubeconfig
        dest: ~/.kube/config
        force: yes
        mode: "u=rx,g=rwx,o=rwx"
      tags:
         - install_ocp
    - name: Approve certs
      shell:
        chdir: ../
        cmd: ./31-approve-certs.sh
      loop: [1,2,3,4,5,6,7,8,9]
      loop_control:
        pause: 120
      tags:
         - install_ocp
    - name: wait for complition of installer 
      shell:
        chdir: ../ocp4
        cmd: openshift-install wait-for install-complete 
      tags:
         - install_ocp
    - name: OCP admin password
      shell:
        chdir: ../ocp4/auth
        cmd: cat kubeadmin-password
      register: kubeadmin
      tags:
         - install_ocp
    - debug: var=kubeadmin.stdout_lines
      tags:
         - install_ocp
