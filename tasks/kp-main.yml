---
# Setup OCP4 Helper Node

- hosts: all
  vars_files:
    - ../vars/main.yml
    - ../vars/ports.yml
  handlers:
  - import_tasks: ../handlers/main.yml

  # According to RFC 952, and RFC 1123, also RFC about SRV records should be taken into account)
  # underscores in hostnames are illegal.
  pre_tasks:
  - name: validate hostnames
    import_tasks: validate_host_names.yaml

  tasks:
  - name: generate ssh keys
    import_tasks: generate_ssh_keys.yaml
    when: ssh_gen_key

  - name: set setup facts
    include: set_facts_.yaml

  - name: Install needed packages
    package:
      name: "{{ packages }}"
      state: present

  - name: Install packages for DHCP/PXE install
    package:
      name: "{{ dhcppkgs }}"
      state: present
    when: not staticips
    
  - name: Install additional package for Intel platforms
    package:
      name: "{{ syslinuxpkgs }}"
      state: present
    when: not staticips and not ppc64le

  - name: Remove existing config files
    import_tasks: remove_old_config_files.yaml
    when: remove_old_config_files

  - name: Write out dhcp file
    template:
      src: ../templates/dhcpd.conf.j2
      dest: /etc/dhcp/dhcpd.conf
    notify:
      - restart dhcpd
    when: not staticips and not uefi

  - name: Write out dhcp file (UEFI)
    template:
      src: ../templates/dhcpd-uefi.conf.j2
      dest: /etc/dhcp/dhcpd.conf
    notify:
      - restart dhcpd
    when: not staticips and uefi

  - name: Write out named file
    template:
      src: ../templates/named.conf.j2
      dest: /etc/named.conf
    notify:
      - restart bind
      
  - name: Installing DNS Serialnumber generator
    copy:
      src: ../files/set-dns-serial.sh
      dest: /usr/local/bin/set-dns-serial.sh
      mode: '0555'

  - name: Set zone serial number
    shell: "/usr/local/bin/set-dns-serial.sh"
    register: dymanicserialnumber

  - name: Setting serial number as a fact
    set_fact:
      serialnumber: "{{ dymanicserialnumber.stdout }}"

  - name: Write out "{{ dns.domain | lower }}" zone file
    template:
      src: ../templates/zonefile.j2
      dest: /var/named/zonefile.db
      mode: '0644'
    notify:
      - restart bind
      
  - name: Write out reverse zone file
    template:
      src: ../templates/reverse.j2
      dest: /var/named/reverse.db
      mode: '0644'
    notify:
      - restart bind

  - name: Write out haproxy config file
    template:
      src: ../templates/haproxy.cfg.j2
      dest: /etc/haproxy/haproxy.cfg
    notify:
      - restart haproxy

  - name: Copy httpd conf file
    copy:
      src: ../files/httpd.conf
      dest: /etc/httpd/conf/httpd.conf
    notify:
      - restart httpd

  - name: Create apache directories for installing
    file:
      path: "{{ item }}"
      state: directory
      mode: 0755
    with_items:
      - /var/www/html/install
      - /var/www/html/ignition
  - name: Open up firewall ports
    firewalld:
      permanent: yes
      immediate: yes
      state: enabled
      port: "{{ item[0] }}"
    delegate_to: "{{ item[1] }}"
    run_once: true
    with_nested:
      - "{{ ports }}"
      - "{{ ansible_play_batch }}"

  - name: Best effort SELinux repair - DNS
    shell: "restorecon -vR /var/named || true"

  - name: Best effort SELinux repair - Apache
    shell: "restorecon -vR /var/www/html || true"

  - name: Create NFS export directory
    file:
      path: /export
      state: directory
      mode: 0777
      owner: "{{ owner }}"
      group: "{{ group }}"
    notify:
      - restart nfs
  - name: Copy NFS export conf file
    copy:
      src: ../files/nfs-exports
      dest: /etc/exports
    notify:
      - restart nfs

  - name: Create TFTP config
    file:
      path: /var/lib/tftpboot/pxelinux.cfg
      state: directory
      mode: 0755
    notify:
      - restart tftp
    when: not staticips and not ppc64le

  - name: generate netboot entry for grub2
    shell: grub2-mknetdir --net-directory=/var/lib/tftpboot
    when: not staticips and ppc64le

  - name: Create TFTP RHCOS dir
    file:
      path: /var/lib/tftpboot/rhcos
      state: directory
      mode: 0755
    when: not staticips
  - name: Create TFTP RHCOS dir
    file:
      path: /var/lib/tftpboot/rhcos
      state: directory
      mode: 0755
    when: not staticips

  - name: SEBool allow haproxy connect any port
    seboolean:
      name: haproxy_connect_any
      state: yes
      persistent: yes
    notify:
      - restart haproxy

  - name: Copy over files needed for TFTP
    shell: "cp -a /usr/share/syslinux/* /var/lib/tftpboot"
    when: not staticips and not ppc64le

  - name: Generate pxe config files
    block:
    - name: Set the default tftp file
      template:
        src: ../templates/default.j2
        dest: /var/lib/tftpboot/pxelinux.cfg/default
        mode: 0555
      when: "{{ pxe.generate_default | default(false) }}"
      notify:
        - restart tftp
  - name: Installing TFTP Systemd helper
    copy:
      src: ../files/start-tftp.sh
      dest: /usr/local/bin/start-tftp.sh
      mode: '0555'
    when: not staticips

  - name: Installing TFTP Systemd unit file
    copy:
      src: ../files/helper-tftp.service
      dest: /etc/systemd/system/helper-tftp.service
      mode: '0655'
    when: not staticips

  - name: Systemd daemon reload
    systemd:
      daemon_reload: yes
    when: not staticips

  - name: Starting services
    service:
      name: "{{ item }}"
      enabled: yes
      state: started
    with_items:
      - "{{ services }}"
  - name: Starting DHCP/PXE services
    service:
      name: "{{ item }}"
      enabled: yes
      state: started
    with_items:
      - dhcpd
      - tftp
      - helper-tftp
    when: not staticips

  - name: Unmasking Services
    systemd:
      name: "{{ item }}"
      enabled: yes
      masked: no
    with_items:
      - tftp
    when: not staticips

  - name: Copy info script over
    template:
      src: ../templates/checker.sh.j2
      dest: /usr/local/bin/helpernodecheck
      owner: root
      group: root
      mode: 0555
  - name: Copying over nfs-provisioner rbac
    copy:
      src: ../files/nfs-provisioner-rbac.yaml
      dest: /usr/local/src/nfs-provisioner-rbac.yaml
      owner: root
      group: root
      mode: 0666

  - name: Copying over nfs-provisioner deployment
    template:
      src: ../templates/nfs-provisioner-deployment.yaml.j2
      dest: /usr/local/src/nfs-provisioner-deployment.yaml
      owner: root
      group: root
      mode: 0666

  - name: Copying over nfs-provisioner storageclass
    copy:
      src: ../files/nfs-provisioner-sc.yaml
      dest: /usr/local/src/nfs-provisioner-sc.yaml
      owner: root
      group: root
      mode: 0666

  - name: Copying over nfs-provisioner setup script
    copy:
      src: ../files/nfs-provisioner-setup.sh
      dest: /usr/local/bin/nfs-provisioner-setup.sh
      owner: root
      group: root
      mode: 0555
  - name: Copying over a sample PVC file for NFS
    copy:
      src: ../files/registry-pvc.yaml
      dest: /usr/local/src/registry-pvc.yaml
      mode: '0555'

  - name: Chrony configuration
    block:
    - name: Create folder for additional machineconfig
      file:
        path: "{{ machineconfig_path }}"
        state: directory

    - name: Create temporary chrony.conf file
      template:
        src: ../templates/chrony.conf.j2
        dest: /tmp/chrony.conf.tmp

    - name: slurp contents of temporary chrony.conf file
      slurp:
        src: /tmp/chrony.conf.tmp
      register: chronybase64

    - name: Generate Chrony machineconfig
      template:
        src: ../templates/chrony-machineconfig.j2
        dest: "{{ machineconfig_path }}/99-{{item}}-chrony-configuration.yaml"
      loop:
        - master
    - name: Generate Chrony machineconfig
      template:
        src: ../templates/chrony-machineconfig.j2
        dest: "{{ machineconfig_path }}/99-{{item}}-chrony-configuration.yaml"
      loop:
        - worker
      when:
        - workers is defined
        - workers | length > 0
    when: chronyconfig.enabled

  - name: Removing files that are not needed
    file:
      path: /usr/local/bin/README.md
      state: absent

  - name: Set the local resolv.conf file
    template:
      src: ../templates/resolv.conf.j2
      dest: /etc/resolv.conf

  - name: Get network device system name
    shell: "nmcli -t dev show {{ networkifacename }} | grep GENERAL.CONNECTION | cut -d: -f2"
    register: devicesystemname
  - name: Setting network device system name as a fact
    set_fact:
      dsname: "{{ devicesystemname.stdout }}"

  - name: Setting DNS server ip on network interface "{{ dsname }}" to 127.0.0.1
    shell: 'nmcli con mod "{{ dsname }}" ipv4.dns 127.0.0.1'

  - name: Setting DNS search path on network interface "{{ dsname }}" to "{{ dns.clusterid }}.{{ dns.domain | lower }}"
    shell: 'nmcli con mod  "{{ dsname }}" ipv4.dns-search {{ dns.clusterid }}.{{ dns.domain | lower }}'

  - name: Restarting NetworkManager
    service:
      name: "{{ item }}"
      state: restarted
    with_items:
      - NetworkManager

  - name: Setup keepalived service
    when: high_availability is defined
    import_tasks: setup_keepalived.yaml

  - name: Enable restart always for critical services
    include_tasks: restart_config.yaml
    loop: "{{ critical_services }}"

  - name:  Information about this install
    debug:
      msg:
        - "Please run /usr/local/bin/helpernodecheck for information"
